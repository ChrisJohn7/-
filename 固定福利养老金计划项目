import random
from typing import List
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
wealth_0 = np.array([100, 110, 120, 130, 140, 150])
name = locals()
for i in range(10):
    name['Decision_Table_Time' + str(i)] = pd.read_csv(r'D:\test\Python3\Pycharm\PyCharm Community Edition '
                                                       r'2022.3.2\test\CFRM507\Decision_Table_Year' + str(i) + '.csv',
                                                       index_col= None)
# load
for k in wealth_0:
    name['final_wealth_list_T7_' + str(k)] = np.load(r'D:\test\Python3\Pycharm\PyCharm Community Edition '
                                                    r'2022.3.2\test\CFRM507\final_wealth_list_' + str(k) + '_T7.npy')
for n in wealth_0:
    name['final_wealth_list_' + str(n)] = np.load(r'D:\test\Python3\Pycharm\PyCharm Community Edition '
                                                     r'2022.3.2\test\CFRM507\final_wealth_list_' + str(n) + '.npy')
Mean = np.array([6, 5.9, 7, 5.6, 4.2, 5.2, 2.5]) / 100
# Variance percentages
std_dev = [0.191, 0.202, 0.268, 0.207, 0.048, 0.120, 0.058]
bp: List[float] = [0.0018, 0.0016, 0.0014, 0.0012, 0.001, 0.0008, 0.0006]
# Correlation matrix
correlation_matrix = np.array(
    [[1.00, 0.74, 0.67, 0.74, 0.13, 0.47, 0.02],
     [0.74, 1.00, 0.70, 0.78, 0.09, 0.46, 0.00],
     [0.67, 0.70, 1.00, 0.66, 0.07, 0.45, -0.03],
     [0.74, 0.78, 0.66, 1.00, 0.10, 0.37, -0.03],
     [0.13, 0.09, 0.07, 0.10, 1.00, 0.10, 0.10],
     [0.47, 0.46, 0.45, 0.37, 0.10, 1.00, 0.55],
     [0.02, 0.00, -0.03, -0.03, 0.10, 0.55, 1.00]]
)

# Calculate covariance matrix
covariance_matrix = np.outer(std_dev, std_dev) * correlation_matrix

solving_scenarios = 100




for i in range(10):
    name['normal_sample' + str(i)] = np.random.multivariate_normal(Mean, covariance_matrix, solving_scenarios)
    name['log_normal_sample' + str(i)] = np.exp(name['normal_sample' + str(i)]) - 1

# weights of each ETF
ETF_weights = [
    [45, 41, 30, 27, 24, 19, 15],
    [25, 20, 16, 15, 11, 9, 6],
    [10, 9, 8, 6, 5, 4, 3],
    [10, 10, 8, 6, 5, 4, 3],
    [5, 10, 30, 40, 45, 50, 55],
    [5, 10, 8, 6, 5, 4, 3],
    [0, 0, 0, 0, 5, 10, 15]
]
ETF_weights = np.matrix(ETF_weights) / 100
# Calculate ETF returns
for i in range(10):
    name['ETF_returns' + str(i)] = (name['log_normal_sample' + str(i)] @ ETF_weights) - bp
    name['ETF_returns' + str(i)] = pd.DataFrame(name['ETF_returns' + str(i)],
                                                columns=[['ETF1', 'ETF2', 'ETF3', 'ETF4', 'ETF5', 'ETF6', 'ETF7']])

# the range of wealth

alpha = 0.9  # eliminate the extreme scenarios
for i in range(9):
    if i == 0:
        name['wealth_' + str(i + 1) + '_upper_bound'] = wealth_0.max() * (
                1 + np.quantile(name['ETF_returns' + str(i)], alpha)) + 25
        name['wealth_' + str(i + 1) + '_lower_bound'] = wealth_0.min() * (
                1 + (name['ETF_returns' + str(i)]).min().min()) + 25

    else:
        name['wealth_' + str(i + 1) + '_upper_bound'] = name['wealth_' + str(i) + '_upper_bound'] * (
                1 + np.quantile(name['ETF_returns' + str(i)], alpha)) + 25
        name['wealth_' + str(i + 1) + '_lower_bound'] = name['wealth_' + str(i) + '_lower_bound'] * (
                1 + (name['ETF_returns' + str(i)]).min().min()) + 25

for i in range(9):
    name['wealth_' + str(i + 1)] = np.arange(np.round(name['wealth_' + str(i + 1) + '_lower_bound']),
                                             np.round(name['wealth_' + str(i + 1) + '_upper_bound']), 1)


def utility_function(Account_Balance: int):
    if int(Account_Balance) > 500:
        return 0.5 * (Account_Balance - 500)
    elif int(Account_Balance) == 500:
        return 0
    elif int(Account_Balance) < 500:
        return Account_Balance - 500 - 100 * np.log(500 - Account_Balance)


# Dynamic programming solve it backwardly at time T = 9
Decision_ETF = []
Decision_ETF_EU = []
ETF_returns9 = name['ETF_returns9']
for i in name['wealth_9']:
    w = i
    w_end = (w + 25) * (1 + ETF_returns9)
    Expected_Utility = w_end.applymap(utility_function).mean()  # calculate the expected utility for each ETF
    Decision_ETF.append(Expected_Utility[Expected_Utility == Expected_Utility.max()].index[0][
                            0])  # choose the ETF with the biggest utility
    Decision_ETF_EU.append(
        Expected_Utility[Expected_Utility[Expected_Utility == Expected_Utility.max()].index[0][0]])  # E[v_ETF_i]
Decision_Table_9 = pd.DataFrame([name['wealth_9'], Decision_ETF_EU, Decision_ETF]).T
Decision_Table_9.columns = ['Wealth Level', 'ETF Expected Utility', 'Decision']
tolerance = 1
for i in np.arange(8, -1, -1):
    Decision_ETF = []
    Decision_ETF_EU = []
    wealth = name['wealth_' + str(i)]
    for j in wealth:
        w = j
        w_end = (w + 25) * (1 + name['ETF_returns' + str(i)])
        # at time stage 0-8, we can't directly apply utility function to calculate, we should instead use the recursive
        # relationship to find the corresponding utility value if we get that value at time t = t+1 .i.e w_end
        closest_w = w_end.applymap(
            lambda x: min(name['Decision_Table_' + str(i + 1)]['Wealth Level'], key=lambda v: abs(v - x)))
        distance = np.abs(closest_w - w_end)
        closest_w = closest_w[~(distance > tolerance).any(axis=1)]
        Expected_Utility = closest_w.applymap(
            lambda x: float(name['Decision_Table_' + str(i + 1)][name['Decision_Table_' + str(i + 1)][
                                                                     "Wealth Level"] == x][
                                'ETF Expected Utility'])).mean()
        Decision_ETF.append(Expected_Utility[Expected_Utility == Expected_Utility.max()].index[0][0])
        Decision_ETF_EU.append(
            Expected_Utility[Expected_Utility[Expected_Utility == Expected_Utility.max()].index[0][0]])
    name['Decision_Table_' + str(i)] = pd.DataFrame([name['wealth_' + str(i)], Decision_ETF_EU, Decision_ETF]).T
    name['Decision_Table_' + str(i)].columns = ['Wealth Level', 'ETF Expected Utility', 'Decision']

# save
for i in range(10):
    name['Decision_Table_' + str(i)].to_csv('Decision_Table5_Time' + str(i) + '.csv')

# Simulation Process
# draw different scenarios to calculate the probability to have money over $500M
# now we have the table about what should I do at the given wealth level and at a given year
# simulation process with time horizon T
# simulation samples
simulation_scenarios = 10000
np.random.seed(1)
name['simulation_normal_sample'] = np.random.multivariate_normal(Mean, covariance_matrix, simulation_scenarios)
name['simulation_log_normal_sample'] = np.exp(name['simulation_normal_sample']) - 1
name['ETF_returns'] = (name['simulation_log_normal_sample'] @ ETF_weights) - bp
name['ETF_returns'] = pd.DataFrame(name['ETF_returns'],
                                                columns=[['ETF1', 'ETF2', 'ETF3', 'ETF4', 'ETF5', 'ETF6', 'ETF7']])
T = 10
tolerance = 1  # measure how close can be taken into consideration
for k in wealth_0:
    final_wealth_list = []
    good_wealth_list = []
    for i in range(simulation_scenarios):
        wealth = k
        for j in range(10 - T, 10):
            flag = 0
            closest_w = int(name['Decision_Table_Time' + str(j)]['Wealth Level'][(name['Decision_Table_Time' + str(j)]
                                                                                  [
                                                                                      'Wealth Level'] - wealth).abs().argsort()[
                                                                                 :1]])
            # if there is an outlier that can't be found in the decision table next year, we just eliminate it
            if np.abs(wealth - closest_w) >= tolerance:
                flag = 1
                break
            ETF_to_choose = name['Decision_Table_Time' + str(j)][name['Decision_Table_Time' + str(j)]['Wealth Level'] ==
                                                                 closest_w]['Decision'].iloc[0]
            return_sample = float(
                name['ETF_returns'][ETF_to_choose].sample().iloc[0])  # choose one path from all
            # possible scenarios for given ETF at time j

            if j == 10 - T:
                wealth = wealth * (1 + return_sample)
            else:
                wealth = (wealth + 25) * (1 + return_sample)
        if flag == 0:
            final_wealth_list.append(wealth)
        else:
            continue
    name['final_wealth_list' + str(k)] = final_wealth_list
    good_wealth_list = [i for i in final_wealth_list if i >= 500]
    bad_wealth_list = [j for j in final_wealth_list if j <= 200]
    win_rate = len(good_wealth_list) / len(final_wealth_list)
    lose_rate = len(bad_wealth_list) / len(final_wealth_list)
    print('the probability of get more than $500M given start wealth $%dM is %.3f' % (k, win_rate))
    print('the probability of get less than $200M given start wealth $%dM is %.3f' % (k, lose_rate))
    print('the maximum value of the final wealth given start wealth $%dM is $%.3fM' % (k, np.max(final_wealth_list)))
    print('the minimum value of the final wealth given start wealth $%dM is $%.3fM' % (k, np.min(final_wealth_list)))
    print('the mean value of the final wealth given start wealth $%dM is $%.3fM' % (k, np.mean(final_wealth_list)))
    print('the 75-quantile of the final wealth given start wealth $%dM is $%.3fM' % (
    k, np.quantile(final_wealth_list, 0.75)))
    print('the 25-quantile of the final wealth given start wealth $%dM is $%.3fM' % (
    k, np.quantile(final_wealth_list, 0.25)))
    print('\n')
# save
for k in wealth_0:
    np.save('final_wealth_list_' + str(k) + '.npy', name['final_wealth_list' + str(k)])

plt.figure(figsize=(10, 6))
data = [name['final_wealth_list100_T7'],name['final_wealth_list110_T7'], name['final_wealth_list120_T7'], name['final_wealth_list130_T7']
        , name['final_wealth_list140_T7'], name['final_wealth_list150_T7']]
boxprops = dict(facecolor='lightblue', color='black', linewidth=1.5)
flierprops = dict(marker='x', markerfacecolor='red', markersize=1.5, linestyle='none')

plt.boxplot(data, widths=.5, patch_artist=True, medianprops={'color': 'black'}, boxprops=boxprops, flierprops=flierprops, showfliers=False)

# Annotate max, min, mean, 75th percentile, and 25th percentile
for i in range(1, 7):  # 7 initial wealth levels
    final_wealth_list = name['final_wealth_list' + str(100 + 10*(i-1)) + '_T7']
    max_val = np.max(final_wealth_list)
    min_val = np.min(final_wealth_list)
    mean_val = np.mean(final_wealth_list)
    q3_val = np.quantile(final_wealth_list, 0.75)
    q1_val = np.quantile(final_wealth_list, 0.25)
    median_val = np.median(final_wealth_list)
    plt.text(i, 850, f'Max: {max_val:.2f}', ha='center', va='top', color='red', fontsize=15)

    plt.text(i, 100, f'Min: {min_val:.2f}', ha='center', va='top', color='green', fontsize=15)

    plt.annotate(f'Mean: {mean_val:.2f}', xy=(i, mean_val), xytext=(i, mean_val + 9),
                 fontsize=12, ha='center', weight='bold')

    plt.annotate(f'Median: {median_val:.2f}', xy=(i, median_val), xytext=(i, median_val - 12),
                 fontsize=12, ha='center', weight='bold')

    plt.annotate(f'Q3: {q3_val:.2f}', xy=(i, q3_val), xytext=(i , q3_val + 10),
                 fontsize=12, ha='center', weight='bold')

    plt.annotate(f'Q1: {q1_val:.2f}', xy=(i, q1_val), xytext=(i, q1_val - 10),
                 fontsize=12, ha='center', weight='bold')

plt.xticks(np.arange(1, 7), ['100', '110', '120', '130', '140', '150'])
plt.xlabel('Initial Wealth Level(Million $)',size = 15)
plt.ylabel('Final Wealth Level(T = 7)',size = 15)
plt.title('Final Wealth Distribution for 7 Years Time Horizon',size = 15)

plt.show()
plt.savefig('Final Wealth Distribution for 7 Years Time Horizon.png', dpi=1000)


# robustness analysis
simulation_scenarios = 10000
np.random.seed(1)
name['simulation_normal_sample'] = np.random.multivariate_normal(Mean, covariance_matrix, simulation_scenarios)
name['simulation_log_normal_sample'] = np.exp(name['simulation_normal_sample']) - 1
name['ETF_returns'] = (name['simulation_log_normal_sample'] @ ETF_weights) - bp
name['ETF_returns'] = pd.DataFrame(name['ETF_returns'],
                                                columns=[['ETF1', 'ETF2', 'ETF3', 'ETF4', 'ETF5', 'ETF6', 'ETF7']])
T = 7
tolerance = 5  # measure how close can be taken into consideration
k = 100

win_rate_list = []
for simulation_scenarios in np.arange(1000,30000,1000):
    final_wealth_list = []
    for i in range(simulation_scenarios):
        wealth = k
        for j in range(10-T, 10):
            flag = 0
            closest_w = int(name['Decision_Table_Time' + str(j)]['Wealth Level'][(name['Decision_Table_Time' + str(j)]
                                                                        ['Wealth Level'] - wealth).abs().argsort()[:1]])
            # if there is an outlier that can't be found in the decision table next year, we just eliminate it
            if np.abs(wealth - closest_w) >= tolerance:
                flag = 1
                break
            ETF_to_choose = name['Decision_Table_Time' + str(j)][name['Decision_Table_Time' + str(j)]['Wealth Level'] ==
                                                     closest_w]['Decision'].iloc[0]
            return_sample = float(
                name['ETF_returns'][ETF_to_choose].sample().iloc[0])  # choose one path from all
            # possible scenarios for given ETF at time j

            if j == 10 - T:
                wealth = wealth * (1 + return_sample)
            else:
                wealth = (wealth + 25) * (1 + return_sample)
        if flag == 0:
            final_wealth_list.append(wealth)
        else:
            continue
    good_wealth_list = [i for i in final_wealth_list if i >= 500]
    win_rate = len(good_wealth_list) / len(final_wealth_list)
    win_rate_list.append(win_rate)
win_rate_list = [0.16616616616616617, 0.15565565565565564, 0.16372124041347116, 0.1566958698372966, 0.16700040048057668, 0.1630779502587214, 0.15374713958810068, 0.15379802277562257, 0.15460709125263977, 0.16267655013522989, 0.16282670066478463, 0.15407703851925963, 0.16060979365568218, 0.16207710464201416, 0.159250116752285, 0.1580923770184003, 0.1575600565237871, 0.15747330960854092, 0.1565858798735511, 0.15545104317806574, 0.15921014976628828, 0.15655577299412915, 0.15858436357304545, 0.15752367443994827, 0.15804436614078643, 0.16198321656786513, 0.15568817881899397, 0.15639522413669837, 0.1591826873295827]
plt.figure(figsize=(10,6))
plt.plot(np.arange(1000,30000,1000),win_rate_list )
plt.plot(np.arange(1000,30000,1000), [np.mean(win_rate_list)] * 29)
plt.xlabel('# of simulation_scenarios', size = 10)
plt.ylabel('Probability', size = 10)
plt.title('The probability of have over $500M at final stage given T = 7 and initial wealth = 100', size = 10)
plt.legend(['The probability of have over $500M at final stage', 'mean_value'])
plt.savefig('The probability of have over $500M at final stage given T = 7 and initial wealth = 100.png' , bpi = 300)

# test the robustness of the number of scenarios
error_list = []
for solving_scenarios in np.arange(10,10000,100):
    error = 0
    for i in range(100):
        scenario = np.random.multivariate_normal(Mean, covariance_matrix, solving_scenarios).mean(axis=0)
        error = np.sum(np.abs(Mean - scenario))
        error += error
    error_list.append(error)
plt.plot(np.arange(10,10000,100),error_list)
plt.xlabel('# of solving scenarios')
plt.ylabel('error between sample mean and actual mean (%)')
plt.title('Choose the best number of solving scenarios')
